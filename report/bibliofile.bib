% Explains the impact of quantum computing on present cryptography
@article{mavroeidis2018impact,
  title   = {{The impact of quantum computing on present cryptography}},
  author  = {Mavroeidis, Vasileios and Vishi, Kamer and Zych, Mateusz D and J{\o}sang, Audun},
  journal = {arXiv preprint arXiv:1804.00200},
  year    = {2018}
}

% Cite the following URL: 

% Explains the PQC standardization competition https://csrc.nist.gov/Projects/Post-Quantum-Cryptography
@misc{nist2017pqc,
  title        = {{Post-Quantum Cryptography Standardization}},
  author       = {NIST},
  year         = {2017},
  howpublished = {\url{https://csrc.nist.gov/projects/post-quantum-cryptography/post-quantum-cryptography-standardization}},
  note         = {Accessed: 08-07-2024}
}


% Explains the concept of MEDS and its application in digital signatures
@inproceedings{chou2023take,
  author    = {Chou, Tung
               and Niederhagen, Ruben
               and Persichetti, Edoardo
               and Randrianarisoa, Tovohery Hajatiana
               and Reijnders, Krijn
               and Samardjiska, Simona
               and Trimoska, Monika},
  editor    = {El Mrabet, Nadia
               and De Feo, Luca
               and Duquesne, Sylvain},
  title     = {{Take Your MEDS: Digital Signatures from Matrix Code Equivalence}},
  booktitle = {Progress in Cryptology - AFRICACRYPT 2023},
  year      = {2023},
  publisher = {Springer Nature Switzerland},
  address   = {Cham},
  pages     = {28--52},
  abstract  = {In this paper, we show how to use the Matrix Code Equivalence (MCE) problem as a new basis to construct signature schemes. This extends previous work on using isomorphism problems for signature schemes, a trend that has recently emerged in post-quantum cryptography. Our new formulation leverages a more general problem and allows for smaller data sizes, achieving competitive performance and great flexibility. Using MCE, we construct a zero-knowledge protocol which we turn into a signature scheme named Matrix Equivalence Digital Signature (MEDS). We provide an initial choice of parameters for MEDS, tailored to NIST's Category 1 security level, yielding public keys as small as 2.8 kB and signatures ranging from 18 kB to just around 6.5 kB, along with a reference implementation in C.},
  isbn      = {978-3-031-37679-5}
}

% NIST MEDS submission
@misc{chou2023meds,
  title        = {{Matrix Equivalence Digital Signature}},
  author       = {Chou, Tung and Niederhagen, Ruben and Persichetti, Edoardo and Ran, Lars and Randrianarisoa, Tovohery Hajatiana and Reijnders, Krijn and Samardjiska, Simona and Trimoska, Monika},
  year         = {2023},
  howpublished = {\url{https://www.meds-pqc.org/spec/MEDS-2023-07-26.pdf}}
}

@incollection{gorla2021rank,
  title     = {Rank-metric codes},
  author    = {Gorla, Elisa},
  booktitle = {Concise Encyclopedia of Coding Theory},
  pages     = {227--250},
  year      = {2021},
  publisher = {Chapman and Hall/CRC}
}

% Hardness of MCE
@article{reijnders2024hardness,
  title     = {{Hardness estimates of the code equivalence problem in the rank metric}},
  author    = {Reijnders, Krijn and Samardjiska, Simona and Trimoska, Monika},
  journal   = {Designs, Codes and Cryptography},
  pages     = {1--30},
  year      = {2024},
  publisher = {Springer}
}

% Explains the concept of digital signatures
@misc{goldwasser2008lecture,
  title        = {{Lecture Notes on Cryptography}},
  author       = {Goldwasser, Shafi and Bellare, Mihir},
  howpublished = {Chapter 10: Digital signatures, pages 168--169},
  year         = {2008}
}

@misc{biasse2020less,
  author       = {Jean-Francois Biasse and Giacomo Micheli and Edoardo Persichetti and Paolo Santini},
  title        = {{LESS is More: Code-Based Signatures without Syndromes}},
  howpublished = {Cryptology ePrint Archive, Paper 2020/594},
  year         = {2020},
  note         = {\url{https://eprint.iacr.org/2020/594}},
  url          = {https://eprint.iacr.org/2020/594}
}


% Fiat-Shamir transformation
@inproceedings{fiat1986prove,
  title     = {{How to Prove Yourself: Practical Solutions to Identification and Signature Problems}},
  booktitle = {Advances in Cryptology - CRYPTO '86, Santa Barbara, California, USA, 1986, Proceedings},
  series    = {Lecture Notes in Computer Science},
  publisher = {Springer},
  volume    = {263},
  pages     = {186-194},
  doi       = {10.1007/3-540-47721-7_12},
  author    = {Amos Fiat and Adi Shamir},
  year      = 1986
}

% ARM Cortex-A Series Programmer's Guide for ARMv8-A
@misc{ARMv8A-ProgrammersGuide,
  author       = {{ARM}},
  title        = {{ARM Cortex-A Series Programmer's Guide for ARMv8-A}},
  howpublished = {\url{https://developer.arm.com/documentation/den0024/latest/AArch64-Floating-point-and-NEON}},
  note         = {Accessed: 26-03-2024}
}

% gprof
@article{graham1982gprof,
  title     = {{Gprof: A call graph execution profiler}},
  author    = {{Graham, Susan L and Kessler, Peter B and McKusick, Marshall K}},
  journal   = {ACM Sigplan Notices},
  volume    = {17},
  number    = {6},
  pages     = {120--126},
  year      = {1982},
  publisher = {ACM New York, NY, USA}
}

@inproceedings{de2010new,
  title     = {{The new linux `perf' tools}},
  author    = {{De Melo, Arnaldo Carvalho}},
  booktitle = {{Slides from Linux Kongress}},
  volume    = {18},
  pages     = {1--42},
  year      = {2010}
}

@article{nethercote2007valgrind,
  title     = {{Valgrind: a framework for heavyweight dynamic binary instrumentation}},
  author    = {Nethercote, Nicholas and Seward, Julian},
  journal   = {ACM Sigplan notices},
  volume    = {42},
  number    = {6},
  pages     = {89--100},
  year      = {2007},
  publisher = {ACM New York, NY, USA}
}

@misc{chou2024reducing,
  author       = {Tung Chou and Ruben Niederhagen and Lars Ran and Simona Samardjiska},
  title        = {Reducing Signature Size of Matrix-code-based Signature Schemes},
  howpublished = {Cryptology ePrint Archive, Paper 2024/495},
  year         = {2024},
  doi          = {10.1007/978-3-031-62743-9_4},
  note         = {\url{https://eprint.iacr.org/2024/495}},
  url          = {https://eprint.iacr.org/2024/495}
}

@misc{dworkin2015sha,
  title     = {{SHA-3 standard: Permutation-based hash and extendable-output functions}},
  author    = {Dworkin, Morris J},
  year      = {2015},
  publisher = {Morris J. Dworkin}
}

@inproceedings{bertoni2013keccak,
  author    = {Bertoni, Guido
               and Daemen, Joan
               and Peeters, Micha{\"e}l
               and Van Assche, Gilles},
  editor    = {Johansson, Thomas
               and Nguyen, Phong Q.},
  title     = {{Keccak}},
  booktitle = {Advances in Cryptology -- EUROCRYPT 2013},
  year      = {2013},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  pages     = {313--314},
  abstract  = {In October 2012, the American National Institute of Standards and Technology (NIST) announced the selection of Keccak as the winner of the SHA-3 Cryptographic Hash Algorithm Competition [10,11]. This concluded an open competition that was remarkable both for its magnitude and the involvement of the cryptographic community. Public review is of paramount importance to increase the confidence in the new standard and to favor its quick adoption. The SHA-3 competition explicitly took this into account by giving open access to the candidate algorithms and everyone in the cryptographic community could try to break them, compare their performance, or simply give comments.},
  isbn      = {978-3-642-38348-9}
}

@inproceedings{shor1994algorithms,
  title        = {{Algorithms for quantum computation: discrete logarithms and factoring}},
  author       = {Shor, Peter W},
  booktitle    = {{Proceedings 35th annual symposium on foundations of computer science}},
  pages        = {124--134},
  year         = {1994},
  organization = {Ieee}
}

@inproceedings{grover1996fast,
  title     = {{A fast quantum mechanical algorithm for database search}},
  author    = {Grover, Lov K},
  booktitle = {{Proceedings of the twenty-eighth annual ACM symposium on Theory of computing}},
  pages     = {212--219},
  year      = {1996}
}

@article{montgomery1985modular,
  title   = {{Modular multiplication without trial division}},
  author  = {Montgomery, Peter L},
  journal = {Mathematics of computation},
  volume  = {44},
  number  = {170},
  pages   = {519--521},
  year    = {1985}
}

@inproceedings{barrett1986implementing,
  author    = {Barrett, Paul},
  editor    = {Odlyzko, Andrew M.},
  title     = {{Implementing the Rivest Shamir and Adleman Public Key Encryption Algorithm on a Standard Digital Signal Processor}},
  booktitle = {Advances in Cryptology --- CRYPTO' 86},
  year      = {1987},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  pages     = {311--323},
  abstract  = {A description of the techniques employed at Oxford University to obtain a high speed implementation of the RSA encryption algorithm on an ``off-the-shelf'' digital signal processing chip. Using these techniques a two and a half second (average) encrypt time (for 512 bit exponent and modulus) was achieved on a first generation DSP (The Texas Instruments TMS 32010) and times below one second are achievable on second generation parts. Furthermore the techniques of algorithm development employed lead to a provably correct implementation.},
  isbn      = {978-3-540-47721-1}
}

@article{strassen1969gaussian,
  title     = {{Gaussian elimination is not optimal}},
  author    = {Strassen, Volker},
  journal   = {Numerische mathematik},
  volume    = {13},
  number    = {4},
  pages     = {354--356},
  year      = {1969},
  publisher = {Springer}
}

@inproceedings{coppersmith1987matrix,
  title     = {{Matrix multiplication via arithmetic progressions}},
  author    = {Coppersmith, Don and Winograd, Shmuel},
  booktitle = {{Proceedings of the nineteenth annual ACM symposium on Theory of computing}},
  pages     = {1--6},
  year      = {1987}
}

@misc{intel-avx512,
  author       = {James R. Reinders},
  title        = {{Intel® AVX-512 Instructions}},
  year         = {2017},
  month        = {June},
  day          = {20},
  howpublished = {\url{https://www.intel.com/content/www/us/en/developer/articles/technical/intel-avx-512-instructions.html}},
  note         = {Accessed: 08-07-2024}
}

@misc{becker2022hybrid,
  author       = {Hanno Becker and Matthias J. Kannwischer},
  title        = {{Hybrid scalar/vector implementations of Keccak and SPHINCS$^+$ on AArch64}},
  howpublished = {Cryptology ePrint Archive, Paper 2022/1243},
  year         = {2022},
  note         = {\url{https://eprint.iacr.org/2022/1243}},
  url          = {https://eprint.iacr.org/2022/1243}
}

@misc{xkcp,
  author       = {{XKCP contributors}},
  title        = {{XKCP: Extended Keccak Code Package}},
  howpublished = {\url{https://github.com/XKCP/XKCP}},
  year         = {2024},
  note         = {Accessed: 2024-06-14}
}

@article{damgaard2002sigma,
  title     = {{On $\Sigma$-protocols}},
  author    = {Damg{\aa}rd, Ivan},
  journal   = {Lecture Notes, University of Aarhus, Department for Computer Science},
  volume    = {84},
  year      = {2002},
  publisher = {Springer Berlin, Germany}
}

@misc{SandSoftwaresound2024,
  author       = {{Sand, software and sound}},
  title        = {{ARM Cortex-A72 Fetch and Branch Processing}},
  year         = {2020},
  month        = {December},
  day          = {8},
  howpublished = {\url{https://sandsoftwaresound.net/arm-cortex-a72-fetch-and-branch-processing/}},
  note         = {Accessed: 02-07-2024}
}

@misc{CortexA72OptGuide,
  title        = {{Cortex-A72 Software Optimization Guide}},
  author       = {{Arm Limited}},
  year         = {2015},
  month        = {March 10},
  howpublished = {\url{https://developer.arm.com/documentation/uan0016/latest/}},
  note         = {Accessed: 12-07-2024}
}

@inproceedings{kocher1996timing,
  author    = {Kocher, Paul C.},
  editor    = {Koblitz, Neal},
  title     = {{Timing Attacks on Implementations of Diffie-Hellman, RSA, DSS, and Other Systems}},
  booktitle = {Advances in Cryptology --- CRYPTO '96},
  year      = {1996},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  pages     = {104--113},
  abstract  = {By carefully measuring the amount of time required to perform private key operations, attackers may be able to find fixed Diffie-Hellman exponents, factor RSA keys, and break other cryptosystems. Against a vulnerable system, the attack is computationally inexpensive and often requires only known ciphertext. Actual systems are potentially at risk, including cryptographic tokens, network-based cryptosystems, and other applications where attackers can make reasonably accurate timing measurements. Techniques for preventing the attack for RSA and Diffie-Hellman are presented. Some cryptosystems will need to be revised to protect against the attack, and new protocols and algorithms may need to incorporate measures to prevent timing attacks.},
  isbn      = {978-3-540-68697-2}
}

@misc{bernstein2005cache,
  title        = {{Cache-timing attacks on AES}},
  author       = {Bernstein, Daniel J},
  year         = {2005},
  howpublished = {\url{https://cr.yp.to/antiforgery/cachetiming-20050414.pdf}}
}

@misc{langley2010checking,
  title        = {{ImperialViolet: Checking that functions are constant time with Valgrind}},
  author       = {Langley, Adam},
  year         = {2010},
  month        = {April},
  howpublished = {\url{https://www.imperialviolet.org/2010/04/01/ctgrind.html}},
  note         = {Accessed: 08-07-2024}
}

@misc{timecop,
  title        = {{Timecop}},
  author       = {Timecop},
  howpublished = {\url{https://www.post-apocalyptic-crypto.org/timecop/}},
  note         = {Accessed: 03-07-2024}
}

@article{barthe2019formal,
  title     = {{Formal verification of a constant-time preserving C compiler}},
  author    = {Barthe, Gilles and Blazy, Sandrine and Gr{\'e}goire, Benjamin and Hutin, R{\'e}mi and Laporte, Vincent and Pichardie, David and Trieu, Alix},
  journal   = {Proceedings of the ACM on Programming Languages},
  volume    = {4},
  number    = {POPL},
  pages     = {1--30},
  year      = {2019},
  publisher = {ACM New York, NY, USA}
}

@inproceedings{simon2018you,
  title        = {{What you get is what you C: Controlling side effects in mainstream C compilers}},
  author       = {Simon, Laurent and Chisnall, David and Anderson, Ross},
  booktitle    = {{2018 IEEE European Symposium on Security and Privacy (EuroS\&P)}},
  pages        = {1--15},
  year         = {2018},
  organization = {IEEE}
}

@misc{IIS2023HighLevel,
  author       = {IIS Summer 2023},
  title        = {{meds-simd-highlevel}},
  year         = {2023},
  publisher    = {GitHub},
  journal      = {GitHub repository},
  howpublished = {\url{https://github.com/IIS-summer-2023/meds-simd-highlevel}},
  note         = {Accessed: 08-07-2024}
}

@misc{IIS2023LowLevel,
  author       = {IIS Summer 2023},
  title        = {{meds-simd-lowlevel}},
  year         = {2023},
  publisher    = {GitHub},
  journal      = {GitHub repository},
  howpublished = {\url{https://github.com/IIS-summer-2023/meds-simd-lowlevel}},
  note         = {Accessed: 08-07-2024}
}

@inproceedings{koppl2021performance,
  title        = {{Performance Comparison of ECDH and ECDSA}},
  author       = {Koppl, Martin and Siroshtan, Dmytro and Orgon, Milos and Pocarovsky, Stefan and Bohacik, Antonin and Kuchar, Karel and Holasova, Eva},
  booktitle    = {{2021 2nd International Conference on Electronics, Communications and Information Technology (CECIT)}},
  pages        = {825--829},
  year         = {2021},
  organization = {IEEE}
}

@article{rivest1978method,
  title     = {{A method for obtaining digital signatures and public-key cryptosystems}},
  author    = {Rivest, Ronald L and Shamir, Adi and Adleman, Leonard},
  journal   = {Communications of the ACM},
  volume    = {21},
  number    = {2},
  pages     = {120--126},
  year      = {1978},
  publisher = {ACM New York, NY, USA}
}

@article{johnson2001elliptic,
  title     = {{The elliptic curve digital signature algorithm (ECDSA)}},
  author    = {Johnson, Don and Menezes, Alfred and Vanstone, Scott},
  journal   = {International journal of information security},
  volume    = {1},
  pages     = {36--63},
  year      = {2001},
  publisher = {Springer}
}

@inproceedings{de1998performance,
  author    = {De Win, Erik
               and Mister, Serge
               and Preneel, Bart
               and Wiener, Michael},
  editor    = {Buhler, Joe P.},
  title     = {{On the performance of signature schemes based on elliptic curves}},
  booktitle = {Algorithmic Number Theory},
  year      = {1998},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  pages     = {252--266},
  abstract  = {This paper describes a fast software implementation of the elliptic curve version of DSA, as specified in draft standard documents ANSI X9.62 and IEEE P1363. We did the implementations for the fields GF(2n), using a standard basis, and GF(p). We discuss various design decisions that have to be made for the operations in the underlying field and the operations on elliptic curve points. In particular, we conclude that it is a good idea to use projective coordinates for GF(p), but not for GF(2n). We also extend a number of exponentiation algorithms, that result in considerable speed gains for DSA, to ECDSA, using a signed binary representation. Finally, we present timing results for both types of fields on a PPro-200 based PC, for a C/C++ implementation with small assembly-language optimizations, and make comparisons to other signature algorithms, such as RSA and DSA. We conclude that for practical sizes of fields and moduli, GF(p) is roughly twice as fast as GF(2n). Furthermore, the speed of ECDSA over GF(p) is similar to the speed of DSA; it is approximately 7 times faster than RSA for signing, and 40 times slower than RSA for verification (with public exponent 3).},
  isbn      = {978-3-540-69113-6}
}

@misc{armv8m,
  title        = {{Armv8-M Architecture Reference Manual}},
  author       = {Arm Limited},
  year         = {2015},
  howpublished = {\url{https://developer.arm.com/documentation/ddi0553/latest/}},
  note         = {Accessed: 04-07-2024}
}

@misc{arm64abi,
  title        = {{Procedure Call Standard for the Arm 64-bit Architecture}},
  author       = {Arm Limited},
  year         = {2023},
  howpublished = {\url{https://developer.arm.com/Additional%20Resources/ABI-Procedure%20Call%20Standard%20for%20the%20Arm%2064-bit%20Architecture}},
  note         = {Accessed: 04-07-2024}
}

@book{leon2006linear,
  title     = {{Linear algebra with applications}},
  author    = {Leon, Steven J and De Pillis, Lisette and De Pillis, Lisette G},
  year      = {2006},
  publisher = {Pearson Prentice Hall Upper Saddle River, NJ}
}

@inproceedings{schnorr1990efficient,
  author    = {Schnorr, C. P.},
  editor    = {Brassard, Gilles},
  title     = {{Efficient Identification and Signatures for Smart Cards}},
  booktitle = {Advances in Cryptology --- CRYPTO' 89 Proceedings},
  year      = {1990},
  publisher = {Springer New York},
  address   = {New York, NY},
  pages     = {239--252},
  abstract  = {We present an efficient interactive identification scheme and a related signature scheme that are based on discrete logarithms and which are particularly suited for smart cards. Previous cryptoschemes, based on the discrete logarithm, have been proposed by El Gamal (1985), Chaum, Evertse, Graaf (1988), Beth (1988) and G{\"u}nter (1989). The new scheme comprises the following novel features.},
  isbn      = {978-0-387-34805-6}
}

@misc{fips186,
  title        = {{Digital Signature Standard (DSS)}},
  author       = {National Institute of Standards and Technology},
  howpublished = {Federal Information Processing Standards Publication 186},
  year         = {1994},
  month        = {May},
  note         = {Accessed: 08-07-2024}
}

@article{bernstein2012high,
  title     = {{High-speed high-security signatures}},
  author    = {Bernstein, Daniel J and Duif, Niels and Lange, Tanja and Schwabe, Peter and Yang, Bo-Yin},
  journal   = {Journal of cryptographic engineering},
  volume    = {2},
  number    = {2},
  pages     = {77--89},
  year      = {2012},
  publisher = {Springer}
}

@inproceedings{shand1993fast,
  title        = {{Fast implementations of RSA cryptography}},
  author       = {Shand, Mark and Vuillemin, Jean},
  booktitle    = {{Proceedings of IEEE 11th Symposium on Computer Arithmetic}},
  pages        = {252--259},
  year         = {1993},
  organization = {IEEE}
}

@article{maurer1995fast,
  title     = {{Fast generation of prime numbers and secure public-key cryptographic parameters}},
  author    = {Maurer, Ueli M},
  journal   = {Journal of Cryptology},
  volume    = {8},
  pages     = {123--155},
  year      = {1995},
  publisher = {Springer}
}



@inproceedings{bernstein2015sphincs,
  author    = {Bernstein, Daniel J.
               and Hopwood, Daira
               and H{\"u}lsing, Andreas
               and Lange, Tanja
               and Niederhagen, Ruben
               and Papachristodoulou, Louiza
               and Schneider, Michael
               and Schwabe, Peter
               and Wilcox-O'Hearn, Zooko},
  editor    = {Oswald, Elisabeth
               and Fischlin, Marc},
  title     = {{SPHINCS: Practical Stateless Hash-Based Signatures}},
  booktitle = {Advances in Cryptology -- EUROCRYPT 2015},
  year      = {2015},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  pages     = {368--397},
  abstract  = {This paper introduces a high-security post-quantum stateless hash-based signature scheme that signs hundreds of messages per second on a modern 4-core 3.5GHz Intel CPU. Signatures are 41 KB, public keys are 1 KB, and private keys are 1 KB. The signature scheme is designed to provide long-term {\$}{\$}2^{\{}128{\}}{\$}{\$}security even against attackers equipped with quantum computers. Unlike most hash-based designs, this signature scheme is stateless, allowing it to be a drop-in replacement for current signature schemes.},
  isbn      = {978-3-662-46800-5}
}


@misc{ducas2018crystals,
  author       = {Leo Ducas and Tancrede Lepoint and Vadim Lyubashevsky and Peter Schwabe and Gregor Seiler and Damien Stehle},
  title        = {{CRYSTALS -- Dilithium: Digital Signatures from Module Lattices}},
  howpublished = {Cryptology ePrint Archive, Paper 2017/633},
  year         = {2017},
  note         = {\url{https://eprint.iacr.org/2017/633}},
  url          = {https://eprint.iacr.org/2017/633}
}

@article{fouque2018falcon,
  title   = {{Falcon: Fast-Fourier lattice-based compact signatures over NTRU}},
  author  = {Fouque, Pierre-Alain and Hoffstein, Jeffrey and Kirchner, Paul and Lyubashevsky, Vadim and Pornin, Thomas and Prest, Thomas and Ricosset, Thomas and Seiler, Gregor and Whyte, William and Zhang, Zhenfei and others},
  journal = {Submission to the NIST’s post-quantum cryptography standardization process},
  volume  = {36},
  number  = {5},
  pages   = {1--75},
  year    = {2018}
}

@article{kim2022accelerating,
  title     = {{Accelerating Falcon on ARMv8}},
  author    = {Kim, Youngbeom and Song, Jingyo and Seo, Seog Chung},
  journal   = {IEEE Access},
  volume    = {10},
  pages     = {44446--44460},
  year      = {2022},
  publisher = {IEEE}
}

@article{kim2022crystals,
  title     = {{CRYSTALS-Dilithium on ARMv8}},
  author    = {Kim, Youngbeom and Song, Jingyo and Youn, Taek-Young and Seo, Seog Chung},
  journal   = {Security and Communication Networks},
  volume    = {2022},
  number    = {1},
  pages     = {5226390},
  year      = {2022},
  publisher = {Wiley Online Library}
}

@inproceedings{nguyen2023fast,
  author    = {Nguyen, Duc Tri
               and Gaj, Kris},
  editor    = {El Mrabet, Nadia
               and De Feo, Luca
               and Duquesne, Sylvain},
  title     = {{Fast Falcon Signature Generation and Verification Using ARMv8 NEON Instructions}},
  booktitle = {Progress in Cryptology - AFRICACRYPT 2023},
  year      = {2023},
  publisher = {Springer Nature Switzerland},
  address   = {Cham},
  pages     = {417--441},
  abstract  = {We present our speed records for Falcon signature generation and verification on ARMv8-A architecture. Our implementations are benchmarked on Apple M1 `Firestorm', Raspberry Pi 4 Cortex-A72, and Jetson AGX Xavier. Our optimized signature generation is {\$}{\$}2{\backslash}times {\$}{\$}2{\texttimes}slower, but signature verification is 3--3.9{\$}{\$}{\backslash}times {\$}{\$}{\texttimes}faster than the state-of-the-art CRYSTALS-Dilithium implementation on the same platforms. Faster signature verification may be particularly useful for the client side on constrained devices. Our Falcon implementation outperforms the previous work targeting Jetson AGX Xavier by the factors {\$}{\$}1.48{\backslash}times {\$}{\$}1.48{\texttimes}for signing in falcon512 and falcon1024, {\$}{\$}1.52{\backslash}times {\$}{\$}1.52{\texttimes}for verifying in falcon512, and {\$}{\$}1.70{\backslash}times {\$}{\$}1.70{\texttimes}for verifying in falcon1024. We achieve improvement in Falcon signature generation by supporting a larger subset of possible parameter values for FFT-related functions and applying our compressed twiddle-factor table to reduce memory usage. We also demonstrate that the recently proposed signature scheme Hawk, sharing optimized functionality with Falcon, has {\$}{\$}3.3{\backslash}times {\$}{\$}3.3{\texttimes}faster signature generation and 1.6--1.9{\$}{\$}{\backslash}times {\$}{\$}{\texttimes}slower signature verification when implemented on the same ARMv8 processors as Falcon.},
  isbn      = {978-3-031-37679-5}
}


@inproceedings{kolbl2018putting,
  author    = {K{\"o}lbl, Stefan},
  editor    = {Lange, Tanja
               and Steinwandt, Rainer},
  title     = {{Putting Wings on SPHINCS}},
  booktitle = {Post-Quantum Cryptography},
  year      = {2018},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {205--226},
  abstract  = {SPHINCS is a recently proposed stateless hash-based signature scheme and promising candidate for a post-quantum secure digital signature scheme. In this work we provide a comparison of the performance when instantiating SPHINCS with different cryptographic hash functions on both recent Intel and AMD platforms found in personal computers and the ARMv8-A platform which is prevalent in mobile phones.},
  isbn      = {978-3-319-79063-3}
}


@misc{becker2021neon,
  author       = {Hanno Becker and Vincent Hwang and Matthias J.  Kannwischer and Bo-Yin Yang and Shang-Yi Yang},
  title        = {{Neon NTT: Faster Dilithium, Kyber, and Saber on Cortex-A72 and Apple M1}},
  howpublished = {Cryptology ePrint Archive, Paper 2021/986},
  year         = {2021},
  note         = {\url{https://eprint.iacr.org/2021/986}},
  url          = {https://eprint.iacr.org/2021/986}
}

@misc{ArmNeonIntrinsicsRef,
  title        = {{Arm Neon Intrinsics Reference}},
  author       = {{Arm Limited}},
  year         = {2023},
  month        = {August 4},
  version      = {2023Q2},
  howpublished = {\url{https://arm-software.github.io/acle/neon_intrinsics/advsimd.html}},
  note         = {Accessed: 12-07-2024}
}

@misc{kumar2024algorithms,
  author       = {Anand Kumar Narayanan and Youming Qiao and Gang Tang},
  title        = {Algorithms for Matrix Code and Alternating Trilinear Form Equivalences via New Isomorphism Invariants},
  howpublished = {Cryptology ePrint Archive, Paper 2024/368},
  year         = {2024},
  note         = {\url{https://eprint.iacr.org/2024/368}},
  url          = {https://eprint.iacr.org/2024/368}
}

@misc{ARM_Cortex_A72_TRM,
  title        = {{ARM\textsuperscript{\textregistered} Cortex\textsuperscript{\textregistered}-A72 MPCore Processor: Technical Reference Manual}},
  author       = {{ARM Limited}},
  year         = {2016},
  version      = {r0p3},
  howpublished = {\url{https://developer.arm.com/documentation/100095/0003/?lang=en}},
  note         = {Accessed: 08-09-2024}
}

@misc{baldi2024cross,
  author       = {Marco Baldi and Alessandro Barenghi and Sebastian Bitzer and Patrick Karl and Felice Manganiello and Alessio Pavoni and Gerardo Pelosi and Paolo Santini and Jonas Schupp and Freeman Slaughter and Antonia Wachter-Zeh and Violetta Weger},
  title        = {{CROSS: Codes and Restricted Objects Signature Scheme}},
  year         = {2024},
  month        = feb,
  howpublished = {\url{https://www.cross-crypto.com/CROSS_Specification_v1.2.pdf}},
  note         = {Accessed: 2024-08-09}
}

@misc{cho2022enhanced,
  author       = {Jinkyu Cho and Jong-Seon No and Yongwoo Lee and Zahyun Koo and Young-Sik Kim},
  title        = {{Enhanced pqsigRM: Code-Based Digital Signature Scheme with Short Signature and Fast Verification for Post-Quantum Cryptography}},
  howpublished = {Cryptology ePrint Archive, Paper 2022/1493},
  year         = {2022},
  note         = {\url{https://eprint.iacr.org/2022/1493}},
  url          = {https://eprint.iacr.org/2022/1493}
}

@misc{baldi2024less,
  author       = {Marco Baldi and Alessandro Barenghi and Luke Beckwith and Jean-François Biasse and Andre Esser and Kris Gaj and Kamyar Mohajerani and Gerardo Pelosi and Edoardo Persichetti and Markku-Juhani O. Saarinen and Paolo Santini and Robert Wallace},
  title        = {{LESS: Linear Equivalence Signature Scheme}},
  year         = {2024},
  month        = feb,
  howpublished = {\url{https://www.less-project.com/LESS-2024-02-19.pdf}},
  note         = {Accessed: 2024-08-09}
}

@misc{banegas2023wave,
  author       = {Gustavo Banegas and Pierre Karpman and Kévin Carrier and Johanna Loyer and André Chailloux and Ruben Niederhagen and Alain Couvreur and Nicolas Sendrier and Thomas Debris-Alazard and Benjamin Smith and Philippe Gaborit and Jean-Pierre Tillich},
  title        = {{WAVE}},
  year         = {2023},
  month        = jun,
  howpublished = {\url{https://wave-sign.org/wave_documentation.pdf}},
  note         = {Accessed: 2024-08-09}
}

@inproceedings{ritterhoff2023fuleeca,
  author    = {Ritterhoff, Stefan
               and Maringer, Georg
               and Bitzer, Sebastian
               and Weger, Violetta
               and Karl, Patrick
               and Schamberger, Thomas
               and Schupp, Jonas
               and Wachter-Zeh, Antonia},
  editor    = {Esser, Andre
               and Santini, Paolo},
  title     = {{FuLeeca: A Lee-Based Signature Scheme}},
  booktitle = {Code-Based Cryptography},
  year      = {2023},
  publisher = {Springer Nature Switzerland},
  address   = {Cham},
  pages     = {56--83},
  abstract  = {In this work, we introduce a new code-based signature scheme, called FuLeeca, based on the NP-hard problem of finding codewords of given Lee-weight. The scheme follows the Hash-and-Sign approach applied to quasi-cyclic codes. Similar approaches in the Hamming metric have suffered statistical attacks, which revealed the small support of the secret basis. Using the Lee metric, we are able to thwart such attacks. We use existing hardness results on the underlying problem and study adapted statistical attacks. We propose parameters for FuLeeca and compare them to an extensive list of proposed post-quantum secure signature schemes including the ones already standardized by NIST. This comparison reveals that FuLeeca is competitive. For example, for NIST category I, i.e., 160 bit of classical security, we obtain an average signature size of 1100 bytes and public key sizes of 1318 bytes. Comparing the total communication cost, i.e., the sum of the signature and public key size, we see that FuLeeca is only outperformed by Falcon while the other standardized schemes Dilithium and SPHINCS+ show higher communication costs than FuLeeca.},
  isbn      = {978-3-031-46495-9}
}

@inproceedings{xu2001efficient,
  author    = {Xu, Sheng-Bo
               and Batina, Lejla},
  editor    = {Davida, George I.
               and Frankel, Yair},
  title     = {{Efficient Implementation of Elliptic Curve Cryptosystems on an ARM7 with Hardware Accelerator}},
  booktitle = {Information Security},
  year      = {2001},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  pages     = {266--279},
  abstract  = {This paper presents an efficient implementation of elliptic curve cryptosystems over a prime field on ARM7 with the help of a hardware accelerator. The hardware accelerator has two dedicated large number arithmetic units (LNAU's). Three different implementation platforms are considered: ARM7, ARM7 with one LNAU, and ARM7 with two LNAU's. The time costs for performing point multiplication are measured for all three platforms. On ARM7 with 2 LNAU's platform, we achieved the point multiplication in 18 ms with the chip running at 50 MHz clock frequency.},
  isbn      = {978-3-540-45439-7}
}

@article{seo2016efficient,
  author   = {Seo, Hwajeong and Liu, Zhe and Großschädl, Johann and Kim, Howon},
  title    = {Efficient arithmetic on ARM-NEON and its application for high-speed RSA implementation},
  journal  = {Security and Communication Networks},
  volume   = {9},
  number   = {18},
  pages    = {5401-5411},
  keywords = {public-key cryptography, modular arithmetic, SIMD-level parallelism, vector instructions, ARM-NEON, RSA},
  doi      = {https://doi.org/10.1002/sec.1706},
  url      = {https://onlinelibrary.wiley.com/doi/abs/10.1002/sec.1706},
  eprint   = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/sec.1706},
  abstract = {Abstract Advanced modern processors support single instruction, multiple data instructions (e.g., Intel-AVX and ARM-NEON) and a massive body of research on vector-parallel implementations of modular arithmetic, which are crucial components for modern public-key cryptography ranging from Rivest, Shamir, and Adleman (RSA), ElGamal, Digital Signature Algorithm (DSA), and elliptic curve cryptography, have been conducted. In this paper, we introduce a novel double operand scanning method to speed up multi-precision squaring with non-redundant representations on single instruction, multiple data architecture where the part of the operands are doubled to compute the squaring operation without read-after-write dependencies between source and destination variables. Afterwards, Karatsuba algorithm is applied to both multiplication and squaring operations. For modular multiplication, separated Montgomery algorithm is chosen. Finally, the Rivest, Shamir, and Adleman (RSA) implementations outperform the best-known results on the ARM-NEON platforms. Copyright © 2017 John Wiley \& Sons, Ltd.},
  year     = {2016}
}

@article{tanik2001ecdsa,
  title        = {{ECDSA Optimizations on an ARM Processor for a NIST Curve Over GF(p)}},
  author       = {Tanik, Haluk Kent},
  year         = {2001},
  note         = {Master's Thesis, Oregon State University},
  howpublished = {\url{http://security.ece.orst.edu/papers/01Turan.html}}
}

@inproceedings{talal2009efficient,
  author    = {Talal, Ahmed and Sobh, Mohamed A. and Eldin, Ayman M. Bahaa},
  booktitle = {2009 4th International Design and Test Workshop (IDT)},
  title     = {{An efficient implementation of RSA for low cost microprocessors}},
  year      = {2009},
  volume    = {},
  number    = {},
  pages     = {1-4},
  keywords  = {Costs;Microprocessors;Public key cryptography;Testing;Elliptic curve cryptography;Security;Cryptographic protocols;Random number generation;Energy consumption;Application software;RSA;Cryptography;Optimization;Profiling},
  doi       = {10.1109/IDT.2009.5404094}
}

@inproceedings{bernstein2012neon,
  author    = {Bernstein, Daniel J.
               and Schwabe, Peter},
  editor    = {Prouff, Emmanuel
               and Schaumont, Patrick},
  title     = {{NEON Crypto}},
  booktitle = {Cryptographic Hardware and Embedded Systems -- CHES 2012},
  year      = {2012},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  pages     = {320--339},
  abstract  = {NEON is a vector instruction set included in a large fraction of new ARM-based tablets and smartphones. This paper shows that NEON supports high-security cryptography at surprisingly high speeds; normally data arrives at lower speeds, giving the CPU time to handle tasks other than cryptography. In particular, this paper explains how to use a single 800MHz Cortex A8 core to compute the existing NaCl suite of high-security cryptographic primitives at the following speeds: 5.60 cycles per byte (1.14 Gbps) to encrypt using a shared secret key, 2.30 cycles per byte (2.78 Gbps) to authenticate using a shared secret key, 527102 cycles (1517/second) to compute a shared secret key for a new public key, 624846 cycles (1280/second) to verify a signature, and 244655 cycles (3269/second) to sign a message. These speeds make no use of secret branches and no use of secret memory addresses.},
  isbn      = {978-3-642-33027-8}
}

@misc{azarderaksh2015neon,
  author       = {Reza Azarderakhsh and Zhe Liu and Hwajeong Seo and Howon Kim},
  title        = {{NEON PQCryto: Fast and Parallel Ring-LWE Encryption on ARM NEON Architecture}},
  howpublished = {Cryptology ePrint Archive, Paper 2015/1081},
  year         = {2015},
  note         = {\url{https://eprint.iacr.org/2015/1081}},
  url          = {https://eprint.iacr.org/2015/1081}
}

@inproceedings{seo2014parallel,
  author    = {Seo, Hwajeong
               and Liu, Zhe
               and Park, Taehwan
               and Kim, Hyunjin
               and Lee, Yeoncheol
               and Choi, Jongseok
               and Kim, Howon},
  editor    = {Lee, Hyang-Sook
               and Han, Dong-Guk},
  title     = {{Parallel Implementations of LEA}},
  booktitle = {Information Security and Cryptology -- ICISC 2013},
  year      = {2014},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {256--274},
  abstract  = {LEA is a new lightweight and low-power encryption algorithm. This algorithm has a certain useful features which are especially suitable for parallel hardware and software implementations, i.e., simple ARX operations, non-S-BOX architecture, and 32-bit word size. In this paper we evaluate the performance of the LEA algorithm on ARM-NEON and GPUs by taking advantage of both the desirable features of LEA and a parallel computing platform and programming model by NEON and CUDA. Specifically, we propose novel parallel LEA implementations on representative SIMT and SIMD architectures such as CUDA and NEON. In case of CUDA, we firstly designed a thread-based computation model to fall into functional parallelism by computing several encryptions over one thread. To alleviate the memory transfer delay, we allocate memory to satisfy coalescing memory access. Secondly our method is block cipher implementation written in assembly language, which provides efficient and flexible programming environments. With these optimization techniques, we achieved 17.352 and 2.5 GBps (bytes per second) throughput without/with memory transfer. In case of NEON, we adopted pipeline instructions and SIMD-based execution models, which enhanced encryption by 49.85 {\%} compared to previous ARM implementations.},
  isbn      = {978-3-319-12160-4}
}


@inproceedings{gouvea2015implementing,
  author    = {Gouv{\^e}a, Conrado P. L.
               and L{\'o}pez, Julio},
  editor    = {Nyberg, Kaisa},
  title     = {{Implementing GCM on ARMv8}},
  booktitle = {Topics in Cryptology --- CT-RSA 2015},
  year      = {2015},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {167--180},
  abstract  = {The Galois/Counter Mode is an authenticated encryption scheme which is included in protocols such as TLS and IPSec. Its implementation requires multiplication over a binary finite field, an operation which is costly to implement in software. Recent processors have included instructions aimed to speed up binary polynomial multiplication, an operation which can be used to implement binary field multiplication. Some processors of the ARM architecture, which was reported in 2014 to be present in 95 {\%} of smartphones, include such instructions. In particular, recent devices such as the iPhone 5 s and Galaxy Note 4 have ARMv8 processors, which provide instructions able to multiply two 64-bit binary polynomials and to encrypt using the AES cipher. In this work we present an optimized and timing-resistant implementation of GCM over AES-128 using these instructions. We have obtained timings of 1.71 cycles per byte for GCM authenticated encryption (9 times faster than the timing on ARMv7), 0.51 cycles per byte for GCM authentication only (11 times faster) and 1.21 cycles per byte for AES-128 encryption (8 times faster).},
  isbn      = {978-3-319-16715-2}
}

@inproceedings{wang2015higher,
  author    = {Wang, Junwei
               and Vadnala, Praveen Kumar
               and Gro{\ss}sch{\"a}dl, Johann
               and Xu, Qiuliang},
  editor    = {Nyberg, Kaisa},
  title     = {{Higher-Order Masking in Practice: A Vector Implementation of Masked AES for ARM NEON}},
  booktitle = {Topics in Cryptology --- CT-RSA 2015},
  year      = {2015},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {181--198},
  abstract  = {Real-world software implementations of cryptographic algorithms need to be able to resist various kinds of side-channel attacks, in particular Differential Power Analysis (DPA). Masking is a widely-used countermeasure to protect block ciphers like the Advanced Encryption Standard (AES) against DPA attacks. The basic principle is to split all sensitive intermediate variables manipulated by the algorithm into two shares and process these shares separately. However, this approach still succumbs to higher-order DPA attacks, which exploit the joint leakage of a number of intermediate variables. A viable solution is to generalize masking such that at least {\$}{\$}d+1{\$}{\$}shares are used to protect against {\$}{\$}d{\$}{\$}-th order attacks. Unfortunately, all current higher-order masking schemes introduce a significant computational overhead compared to unmasked implementations. To facilitate the deployment of higher-order masking for the AES in practice, we developed a vector implementation of Coron et al's masking scheme (FSE 2012) for ARM NEON processors. After a comprehensive complexity analysis, we found that Coron et al's scheme with {\$}{\$}n{\$}{\$}shares for each sensitive variable needs {\$}{\$}{\backslash}mathcal {\{}O{\}}(n^2){\$}{\$}multiplications in the field GF({\$}{\$}2^8{\$}{\$}) and {\$}{\$}{\backslash}mathcal {\{}O{\}}(n^2){\$}{\$}random-number generations. Both of these performance-critical operations are executed with only 15 instructions in our software, which is possible thanks to the rich functionality of the NEON instruction set. Our experimental results demonstrate that the performance penalty caused by the integration of higher-order masking is significantly lower than in generally assumed and reported in previous papers. For example, our second-order DPA-protected AES (with three shares for each sensitive variable) is merely eight times slower than an unmasked baseline implementation that resists cache-timing attacks.},
  isbn      = {978-3-319-16715-2}
}

@article{streit2018post,
  author   = {Streit, Silvan and De Santis, Fabrizio},
  journal  = {IEEE Transactions on Computers},
  title    = {{Post-Quantum Key Exchange on ARMv8-A: A New Hope for NEON Made Simple}},
  year     = {2018},
  volume   = {67},
  number   = {11},
  pages    = {1651-1662},
  keywords = {Protocols;Neon;Transforms;Cryptography;Program processors;Quantum computing;ARMv8-A;NEON;ARM cortex-A53;post-quantum key exchange;ring-LWE;NewHope;NewHope-Simple;NTT},
  doi      = {10.1109/TC.2017.2773524}
}

@inproceedings{nguyen2021fast,
  author    = {Nguyen, Duc Tri
               and Gaj, Kris},
  editor    = {Cheon, Jung Hee
               and Tillich, Jean-Pierre},
  title     = {{Fast NEON-Based Multiplication for Lattice-Based NIST Post-quantum Cryptography Finalists}},
  booktitle = {Post-Quantum Cryptography},
  year      = {2021},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {234--254},
  abstract  = {This paper focuses on high-speed NEON-based constant-time implementations of multiplication of large polynomials in the NIST PQC KEM Finalists: NTRU, Saber, and CRYSTALS-Kyber. We use the Number Theoretic Transform (NTT)-based multiplication in Kyber, the Toom-Cook algorithm in NTRU, and both types of multiplication in Saber. Following these algorithms and using Apple M1, we improve the decapsulation performance of the NTRU, Kyber, and Saber-based KEMs at the security level 3 by the factors of 8.4, 3.0, and 1.6, respectively, compared to the reference implementations. On Cortex-A72, we achieve the speed-ups by factors varying between 5.7 and 7.5{\$}{\$}{\backslash}times {\$}{\$}{\texttimes}for the Forward/Inverse NTT in Kyber, and between 6.0 and 7.8{\$}{\$}{\backslash}times {\$}{\$}{\texttimes}for Toom-Cook in NTRU, over the best existing implementations in pure C. For Saber, when using NEON instructions on Cortex-A72, the implementation based on NTT outperforms the implementation based on the Toom-Cook algorithm by {\$}{\$}14{\backslash}{\%}{\$}{\$}14{\%}in the case of the MatrixVectorMul function but is slower by {\$}{\$}21{\backslash}{\%}{\$}{\$}21{\%}in the case of the InnerProduct function. Taking into account that in Saber, keys are not available in the NTT domain, the overall performance of the NTT-based version is very close to the performance of the Toom-Cook version. The differences for the entire decapsulation at the three major security levels (1, 3, and 5) are {\$}{\$}-4{\$}{\$}-4, {\$}{\$}-2{\$}{\$}-2, and {\$}{\$}+2{\backslash}{\%}{\$}{\$}+2{\%}, respectively. Our benchmarking results demonstrate that our NEON-based implementations run on an Apple M1 ARM processor are comparable to those obtained using the best AVX2-based implementations run on an AMD EPYC 7742 processor. Our work is the first NEON-based ARMv8 implementation of each of the three NIST PQC KEM finalists.},
  isbn      = {978-3-030-81293-5}
}

@inproceedings{ortiz2022evaluation,
  title        = {{Evaluation of CRYSTALS-Kyber and Saber on the ARMv8 architecture}},
  author       = {Ortiz, Jheyne N and Rodrigues, F{\'e}lix Carvalho and Gazzoni Filho, D{\'e}cio and Teixeira, Caio and L{\'o}pez, Julio and Dahab, Ricardo},
  booktitle    = {Anais do XXII Simp{\'o}sio Brasileiro em Seguran{\c{c}}a da Informa{\c{c}}{\~a}o e de Sistemas Computacionais},
  pages        = {372--377},
  year         = {2022},
  organization = {SBC}
}

@inproceedings{nguyen2021optimized,
  title     = {{Optimized software implementations of CRYSTALS-Kyber, NTRU, and Saber using NEON-based special instructions of ARMv8}},
  author    = {Nguyen, Duc Tri and Gaj, Kris},
  booktitle = {Proceedings of the NIST 3rd PQC Standardization Conference (NIST PQC 2021)},
  year      = {2021}
}

@article{kwon2023look,
  author     = {Kwon, Hyeokdong and Kim, Hyunjun and Sim, Minjoo and Lee, Wai-Kong and Seo, Hwajeong},
  title      = {{Look-up the Rainbow: Table-based Implementation of Rainbow Signature on 64-bit ARMv8 Processors}},
  year       = {2023},
  issue_date = {September 2023},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {22},
  number     = {5},
  issn       = {1539-9087},
  url        = {https://doi.org/10.1145/3607140},
  doi        = {10.1145/3607140},
  abstract   = {The Rainbow Signature Scheme is one of the finalists in the National Institute of Standards and Technology (NIST) Post-Quantum Cryptography (PQC) standardization competition, but failed to win because it has lack of stability in the parameter selection. It is the only signature candidate based on a multivariate quadratic equation. Rainbow signatures have smaller signature sizes compared with other post-quantum cryptography candidates. However, they require expensive tower-field based polynomial multiplications. In this article, we propose an efficient implementation of Rainbow signatures using a look-up table–based multiplication method. The polynomial multiplications in Rainbow signatures are performed on the 𝔽16 field, which is divided into sub-fields 𝔽4 and 𝔽2 under the tower-field method. To accelerate the multiplication process on target processors, we propose a look-up table–based tower-field multiplication technique. In 𝔽16, all values are expressed in 4-bit data format and can be implemented using a 256-byte look-up table access. The implementation uses the TBL and TBX instructions of the 64-bit ARMv8 target processor. For Rainbow III and Rainbow V, they are computed on the 𝔽256 field using an additional 16-byte table instead of creating a new look-up table. The proposed technique uses the vector registers of 64-bit ARMv8 processors and can calculate 16 result values with a single instruction. We also proposed implementations that are resistant to timing attacks. There are two types of implementations. The first one is the cache side-attack resistant implementation, which utilizes the 128-byte cache lines of the M1 processor. In this implementation, cache misses do not occur, and cache hits always occur. The second type is the constant-time implementation. This method takes a step-by-step approach to finding the required look-up table value and ensures that the same number of accesses is made regardless of which look-up table value is called. This implementation is designed to be constant-time, meaning it does not leak timing information. Our experiments on modern Apple M1 processors showed up to 428.73\texttimes{} and 114.16\texttimes{} better performance for finite field multiplications and Rainbow signatures schemes, respectively, compared with previous reference implementations. To the best of our knowledge, this proposed Rainbow implementation is the first optimized Rainbow implementation for 64-bit ARMv8 processors.},
  journal    = {ACM Trans. Embed. Comput. Syst.},
  month      = {sep},
  articleno  = {80},
  numpages   = {19},
  keywords   = {64-bit ARMv8 processors, software implementations, rainbow signature, Post-quantum cryptography}
}

@inproceedings{ding2005rainbow,
  author    = {Ding, Jintai
               and Schmidt, Dieter},
  editor    = {Ioannidis, John
               and Keromytis, Angelos
               and Yung, Moti},
  title     = {{Rainbow, a New Multivariable Polynomial Signature Scheme}},
  booktitle = {Applied Cryptography and Network Security},
  year      = {2005},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  pages     = {164--175},
  abstract  = {Balanced Oil and Vinegar signature schemes and the unbalanced Oil and Vinegar signature schemes are public key signature schemes based on multivariable polynomials. In this paper, we suggest a new signature scheme, which is a generalization of the Oil-Vinegar construction to improve the efficiency of the unbalanced Oil and Vinegar signature scheme. The basic idea can be described as a construction of multi-layer Oil-Vinegar construction and its generalization. We call our system a Rainbow signature scheme. We propose and implement a practical scheme, which works better than Sflash{\$}^{\{}v{\_}2{\}}{\$}, in particular, in terms of signature generating time.},
  isbn      = {978-3-540-31542-1}
}

@inproceedings{bos2014montgomery,
  author    = {Bos, Joppe W.
               and Montgomery, Peter L.
               and Shumow, Daniel
               and Zaverucha, Gregory M.},
  editor    = {Lange, Tanja
               and Lauter, Kristin
               and Lison{\v{e}}k, Petr},
  title     = {{Montgomery Multiplication Using Vector Instructions}},
  booktitle = {Selected Areas in Cryptography -- SAC 2013},
  year      = {2014},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  pages     = {471--489},
  abstract  = {In this paper we present a parallel approach to compute interleaved Montgomery multiplication. This approach is particularly suitable to be computed on 2-way single instruction, multiple data platforms as can be found on most modern computer architectures in the form of vector instruction set extensions. We have implemented this approach for tablet devices which run the x86 architecture (Intel Atom Z2760) using SSE2 instructions as well as devices which run on the ARM platform (Qualcomm MSM8960, NVIDIA Tegra 3 and 4) using NEON instructions. When instantiating modular exponentiation with this parallel version of Montgomery multiplication we observed a performance increase of more than a factor of 1.5 compared to the sequential implementation in OpenSSL for the classical arithmetic logic unit on the Atom platform for 2048-bit moduli.},
  isbn      = {978-3-662-43414-7}
}

@inproceedings{seo2015montgomery,
  author    = {Seo, Hwajeong
               and Liu, Zhe
               and Gro{\ss}sch{\"a}dl, Johann
               and Choi, Jongseok
               and Kim, Howon},
  editor    = {Lee, Jooyoung
               and Kim, Jongsung},
  title     = {{Montgomery Modular Multiplication on ARM-NEON Revisited}},
  booktitle = {Information Security and Cryptology - ICISC 2014},
  year      = {2015},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {328--342},
  abstract  = {Montgomery modular multiplication constitutes the ``arithmetic foundation'' of modern public-key cryptography with applications ranging from RSA, DSA and Diffie-Hellman over elliptic curve schemes to pairing-based cryptosystems. The increased prevalence of SIMD-type instructions in commodity processors (e.g. Intel SSE, ARM NEON) has initiated a massive body of research on vector-parallel implementations of Montgomery modular multiplication. In this paper, we introduce the Cascade Operand Scanning (COS) method to speed up multi-precision multiplication on SIMD architectures. We developed the COS technique with the goal of reducing Read-After-Write (RAW) dependencies in the propagation of carries, which also reduces the number of pipeline stalls (i.e. bubbles). The COS method operates on 32-bit words in a row-wise fashion (similar to the operand-scanning method) and does not require a ``non-canonical'' representation of operands with a reduced radix. We show that two COS computations can be ``coarsely'' integrated into an efficient vectorized variant of Montgomery multiplication, which we call Coarsely Integrated Cascade Operand Scanning (CICOS) method. Due to our sophisticated instruction scheduling, the CICOS method reaches record-setting execution times for Montgomery modular multiplication on ARM-NEON platforms. Detailed benchmarking results obtained on an ARM Cortex-A9 and Cortex-A15 processors show that the proposed CICOS method outperforms Bos et al's implementation from SAC 2013 by up to 57 {\%} (A9) and 40 {\%} (A15), respectively.},
  isbn      = {978-3-319-15943-0}
}


