==== OLD ====
- Modular reduction; now right or Montgomery?
> The pseudo-mersenne one is probably the fastest. However, to be sure, we can implement all 4 options in assembly:
  Montgomery, Barrett, Pseudo-Mersenne, 'Plontaag' (or something similar?)
> Implement the entirety of the reduction (and maybe even matmul completely) in assembly.

- 4x4 instruction blocks -> how to handle? Padding?
> Ask Ruben about this. Maybe they have solved the issue already. Otherwise; check if it is possible to 'ignore' the padding and let the multiplications just play out? Definitely do not manually pad the matrix every single time.

- Final reduction in modular reduction necessary? Or adjust code so that only 1 final reduction takes place?
> Final reduction (which is called a 'freeze') might not be necessary. Check the entire implementation if a freeze occurs already.

- What are the next steps for the matrix systemizer (RREF)?
> More parallelization should be easily possible. Check with Ruben if it already exists.
  Also; some teams (there is a MQ team?) might also use the same technique.

- Thesis document:
> Make sure to explain MEDS better. Include the algorithm (pseudocode). Include the parameter sets that will be used.
  I should explain it to the extent that for every optimization done, it should be easy to understand why we use it and where it is used.

- Why are medians of matmul and RREF so different for each run?
> Aligned loads do not seem to work.
- Still doesn't seem to work

- What to do about Shake256:
> Good idea to do a parallel run to obtain faster results. The keccak package might include this somewhere already.
  Apple M1/M2 has dedicated hardware for the keccak permutation. We might be able to use this later.
> Yes; keccak package includes this: https://github.com/XKCP/XKCP/tree/master/lib/low/KeccakP-1600-times2/ARMv7A-NEON
- BUT: everything is done with a single keccak state (in code: 'h_shake'). Does this mean no parallelization possible?

https://github.com/IIS-summer-2023/meds-simd-lowlevel
https://github.com/IIS-summer-2023/meds-simd-highlevel

=============
Add more references
- Schnorr, Grover (references)
- Sigma protocol reference
- Use latex definitions (e.g. for a signature scheme or the MCE problem)
- Move appendix to main body
- Related Work: add other post-quantum schemes that have been optimized on the same platform (ARMv8). Mostly signature schemes, but possibly also other ones. Definitely Keccak (with extended Keccak package).
- Cite NEON reference manual maybe?
- For NEON; add pipeline information and latency for used assembly instructions
- FS > 'claimed security for MEDS level ...'
- Consider pie charts for the profilnig comparison
- Shake should be all capital (not function calls)

- simplify and reconstruct systemizer
- analyze remainder of signing and verification

TODO:
- Check dat systemizer code CT is (ook die die de compiler genereert!) (timecop/valgrind?)
- Implement low-level speedup voor systemization (vergelijken?)
- 800-185 https://csrc.nist.gov/pubs/sp/800/185/final
